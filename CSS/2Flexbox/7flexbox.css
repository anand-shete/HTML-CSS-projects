/* 
Flex Container: The parent element where the flexbox properties are applied.  A flex-container controls the layout of all the items overall. 
set display: flex;  to make a flex container
Flex Items: The child elements inside the flex container. These elements are laid out according to the flexbox rules.items can have block or inline display it doesn't matter


// Main and Cross Axis
Main Axis: Defined by the flex-direction. Horizontal by default (flex-direction: row)
Cross Axis: Perpendicular to the main axis. Vertical by default (flex-direction: column)



// Flex-container properties
display: flex;  Activates flexbox for the container. Items within the container become flex items.
These properties are used when we want to change styling of all the items of the flex container.

flex-direction: Defines the direction of the main axis (row or column).
    row (default): Items are placed left-to-right (LTR) or right-to-left (RTL).
    row-reverse: Items are placed in reverse order.
    column: Items are stacked top-to-bottom.
    column-reverse: Items are stacked bottom-to-top.

flex-wrap
Determines whether all items wrap onto multiple lines or remain in a single line.
    nowrap (default): Items remain on one line.
    wrap: Items wrap onto multiple lines.
    wrap-reverse: Items wrap onto multiple lines in reverse order.

justify-content (alignment of all items along the main axis):
Controls how items are aligned along the main axis depending on flex-direction
    flex-start (default): Items align at the start of the container.
    flex-end: Items align at the end.
    center: Items align at the center.
    space-between: Equal space between items.
    space-evenly: Equal space between and around items.
    space-around: Equal space around items. Useless mostly  

align-items (alignment of all items along the cross axis)
Aligns items perpendicularly to the main axis.
    stretch (default): Items stretch to fill the container (if no height is specified).
    flex-start: Items align at the start.
    flex-end: Items align at the end.
    center: Items align in the middle.
    baseline: Aligns items along their text baselines.

align-content (for multi-line containers)
Aligns a group of flex lines (when flex-wrap is used).
    stretch (default): Items stretch to fill the container (if no height is specified).
    flex-start: Items align at the start.
    flex-end: Items align at the end.
    center: Items align in the middle.
    baseline: Aligns items along their text baselines.

gap
Defines the space between flex items. In a row-based flex container (default), the gap sets the horizontal spacing between items. If the flex container is column-based (flex-direction: column), it sets the vertical spacing. 
Can be set as row-gap and column-gap for finer control. 



// Flex-Item properties
These are used when we want to change properties of a specific item in the flexbox.

order: 0 (default)
Determines the order in which items are placed inside flexbox. Lower ordered elements appear first always. 

flex-grow: 0 (default)
Determines how much a specific item will grow relative to others. 

flex-shrink: 1(default)
Determines how much an item will shrink relative to others.
Default: (items shrink to fit).

flex-basis: auto (default)
Specifies the initial size of an item before space distribution.

align-self
Aligns a single item on the cross axis. Overrides the align-items value for that item.
    stretch (default): Items stretch to fill the container (if no height is specified).
    flex-start: Items align at the start.
    flex-end: Items align at the end.
    center: Items align in the middle.
    baseline: Aligns items along their text baselines.

flex: flex-grow, flex-shrink, and flex-basis.
*/

.container {
    background-color: antiquewhite;
    height: 80vh;
    border: 1px solid black;

    /* flex container is made having horizontal main-axis and vertical cross-axis by default */
    display: flex;

    /* flex-direction: row;
    flex-wrap: wrap; */
    flex-flow: row nowrap;                /* flex-flow: flex-direction flex-wrap */ 

    /* justify-content: space-evenly; */

    /* align-items: stretch; */
}

.container div {
    height: 10rem;
    width: 10rem;
    border: 1px solid black;
}

#div1 {
    background-color: green;
}

#div2 {
    background-color: blue;

    /* Lower the order, lower the position */
    /* order: -1; */

    /* This individual element will grow 3 times more than other items */
    /* flex-grow: 3; */
    
    /* This individual element will shrink 3 times more than other items */
    /* flex-shrink: 3; */

    /* sets initial dimension for a specific flex-item */
    /* flex-basis: 300px; */

    /* ovverides the value of align-items for a specific item */
    align-self: flex-end;
}

#div3 {
    background-color: red;
}

#div4 {
    background-color: yellow;
}


/*
When to Use Flexbox
Single-dimensional layouts (horizontal OR vertical alignment).
Centering elements.
Responsive designs where items need to grow, shrink, or wrap automatically.
Distributing space dynamically between elements.
*/