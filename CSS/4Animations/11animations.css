/*
CSS animations allow us to gradually change an any element's style from one state to another.
CSS animations can be combined with transform to create more complex animations like scaling, rotating, and skewing.


first make position other than static(default) depending on use-case to actually se the animations

@keyframes Rule:
Defines the set of keyframes that describe the animation states and how the element should look at each point during the animation. t’s a way to define the various states an element should go through during the animation. 
At each percentage point (0%, 50%, 100%), the element will adopt specific styles.

animation:
Once the keyframes are defined, we use the animation property to apply the animation to the element. This property is shorthand for the following sub-properties:
    animation-name: Specifies the name of the keyframe animation 
    animation-duration: How long the animation will take in seconds
    animation-timing-function: Controls the speed curve (ease, linear, ease-in-out).
    animation-delay: The time to wait before starting the animation (e.g., 1s).
    animation-iteration-count: How many times the animation will play (e.g., infinite for infinite loops).
    animation-direction: Specifies whether the animation should play forwards, backwards, or alternate.
    animation-fill-mode: Defines what values the animation will apply before or after it runs (e.g., forwards or both).


animation-timing-function
Timing functions control how an animation progresses over time. By default, animations follow a linear progression, but timing functions allow us to create different effects.
    linear: The animation progresses at a constant speed.
    ease: The animation starts slow, accelerates, and then slows down towards the end.
    ease-in: Starts slow, accelerates towards the end.
    ease-out: Starts fast, then decelerates towards the end.
    ease-in-out: Starts and ends slowly, with acceleration in the middle.
    cubic-bezier(n,n,n,n): Custom bezier curve using cubic-bezier in inspect section


animation-iteration-count
Defines how many times the animation should run. The default is 1, but we can set it to infinite to loop forever.


animation-direction
This property defines the direction in which the animation plays. It can take the following values:
    normal: The animation runs forwards from the start to the end.
    reverse: The animation runs backwards from the end to the start.
    alternate: The animation alternates between forwards and backwards, which can create a back-and-forth effect. During the first cycle, the element moves from left to right (forward). During the second cycle, the element moves from right to left (reverse). This alternation continues for every cycle.
    alternate-reverse: The animation alternates but starts by running backwards.


animation-fill-mode
defines the styles that will be used in an element before or after an animation is played. They allow us to make the element maintain the final state of the animation or revert to its initial state after the animation completes.
    forwards: The element will retain the style set by the last keyframe (depends on animation-direction and animation-iteration-count)
    backwards: The element will get the style set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
    both: The element retains the styles from both the first and last keyframes.
    none (default): The element reverts to its original state after the animation ends.


animation-play-state
We can pause or resume an animation using animation-play-state. This is useful for scenarios like hover effects, where the animation should stop or start based on user interaction.
    paused: Pauses the animation.
    running: Resumes the animation



    
    // Multiple animations
To apply multiple animations to an element in CSS, we can separate each animation with a comma in the animation property. Each animation can have its own specific timing, duration, delay, and easing function.


// Performance Considerations
Animations can have an impact on the performance of a webpage, especially if they involve expensive operations like layout recalculations or page repaints. To optimize:
Use transform and opacity for animations, as these are GPU-accelerated and don’t trigger reflows.
Avoid animating properties like width, height or left, as they can trigger layout recalculations and slow down performance
Avoid using animation properties like direction, fill-mode. Using keyframes as the primary control mechanism can significantly simplify complex animations. It also gives you full control over the timing, direction, and flow of the animation.


// Shorthand
animation: <duration> <easing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state> <name>;

*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    background-color: antiquewhite;
    height: 100vh;
    width: 100vw;
}


/* CSS animations */
.loader {
    background-color: blue;
    width: 300px;
    height: 10px;
    margin-top: 91px;
    border-radius: 10px;

    position: relative;
    animation-name: loader;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-delay: 0.5s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-fill-mode: none;
    /* animation-play-state: paused; */
}

@keyframes loader {
    from {
        left: 0px;
    }

    to {
        left: 1235px;
    }
}


/* Combining two animations */
#blue-box {
    background-color: blue;
    width: 300px;
    height: 100px;
    border-radius: 10px;


    /* Applying multiple animations */
    position: relative;
    animation: x-dir 1s ease-in-out 0s 1 normal forwards,
        y-dir 0.5s ease-in-out 1s 1 normal forwards,
        x-dir 1s ease-in-out 1.5s 1 reverse forwards,
        y-dir 0.5s ease-in-out 2.5s 1 reverse forwards;
}

@keyframes x-dir {
    /* We can work with percentages 0%, 33.33%, 75% also */
    from {
        left: 0px;
    }

    to {
        left: 1225px;
    }
}

@keyframes y-dir {
    from {
        top: 0px;
    }

    to {
        top: 100px;
    }
}


.circle {
    margin-top: 200px;
    background-color: blue;
    width: 300px;
    height: 300px;
    border-radius: 50%;
}